name: Generate Terraform Diagrams

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/terraform-diagrams.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to generate diagram for (leave empty for all)'
        required: false
        type: choice
        options:
          - 'all'
          - 'us-west-1/dev'
          - 'us-west-1/staging'
          - 'us-west-1/prod'
          - 'us-west-2/dev'

jobs:
  generate-diagrams:
    name: Generate Infrastructure Diagrams
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: 
          - path: "us-west-1/dev"
            name: "dev-us-west-1"
          - path: "us-west-1/staging"
            name: "staging-us-west-1"
          - path: "us-west-1/prod"
            name: "prod-us-west-1"
          - path: "us-west-2/dev"
            name: "dev-us-west-2"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install Graphviz
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz
    
    - name: Install blast-radius
      run: |
        pip install blastradius
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5
        terraform_wrapper: false
    
    - name: Check if environment exists
      id: check-env
      run: |
        if [ -d "${{ matrix.environment.path }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Environment ${{ matrix.environment.path }} does not exist, skipping..."
        fi
    
    - name: Terraform Init
      if: steps.check-env.outputs.exists == 'true'
      working-directory: ${{ matrix.environment.path }}
      run: |
        terraform init -backend=false
      continue-on-error: true
    
    - name: Terraform Plan
      if: steps.check-env.outputs.exists == 'true'
      working-directory: ${{ matrix.environment.path }}
      run: |
        terraform plan -out=tfplan || echo "Plan failed, continuing with existing state..."
      continue-on-error: true
    
    - name: Generate diagram
      if: steps.check-env.outputs.exists == 'true'
      working-directory: ${{ matrix.environment.path }}
      run: |
        echo "Generating diagram for ${{ matrix.environment.name }}..."
        mkdir -p ../../diagrams
        
        # Generate SVG diagram
        if blast-radius --svg > ../../diagrams/${{ matrix.environment.name }}.svg 2>/dev/null; then
          echo "Successfully generated SVG diagram"
        else
          echo "Failed to generate SVG diagram, creating placeholder"
          echo '<svg xmlns="http://www.w3.org/2000/svg" width="400" height="200"><text x="20" y="100" font-family="Arial" font-size="16">Diagram generation failed for ${{ matrix.environment.name }}</text></svg>' > ../../diagrams/${{ matrix.environment.name }}.svg
        fi
        
        # Generate DOT file for debugging
        blast-radius --dot > ../../diagrams/${{ matrix.environment.name }}.dot 2>/dev/null || echo "Failed to generate DOT file"
        
        # Clean up
        rm -f tfplan
    
    - name: Upload diagrams as artifacts
      if: steps.check-env.outputs.exists == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: terraform-diagrams-${{ matrix.environment.name }}
        path: |
          diagrams/${{ matrix.environment.name }}.svg
          diagrams/${{ matrix.environment.name }}.dot
        retention-days: 30
  
  commit-diagrams:
    name: Commit Updated Diagrams
    runs-on: ubuntu-latest
    needs: generate-diagrams
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Download all diagram artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Move diagrams to correct location
      run: |
        mkdir -p diagrams
        find artifacts -name "*.svg" -exec cp {} diagrams/ \;
        find artifacts -name "*.dot" -exec cp {} diagrams/ \;
        ls -la diagrams/
    
    - name: Generate diagram index
      run: |
        cat > diagrams/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Terraform Infrastructure Diagrams</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; text-align: center; }
                .diagram-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                .diagram-card { border: 1px solid #ddd; border-radius: 8px; padding: 15px; background: #fafafa; }
                .diagram-card h3 { margin-top: 0; color: #2c5aa0; }
                .diagram-preview { text-align: center; margin: 10px 0; }
                .diagram-preview svg { max-width: 100%; height: auto; border: 1px solid #ccc; }
                .timestamp { color: #666; font-size: 0.9em; text-align: center; margin-top: 20px; }
                .env-dev { border-left: 4px solid #3498db; }
                .env-staging { border-left: 4px solid #f39c12; }
                .env-prod { border-left: 4px solid #e74c3c; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Terraform Infrastructure Diagrams</h1>
                <p>Interactive visualizations of our multi-environment AWS infrastructure across us-west-1 and us-west-2 regions.</p>
                
                <div class="diagram-grid">
        EOF
        
        # Add each diagram to the index
        for svg in diagrams/*.svg; do
            if [ -f "$svg" ]; then
                filename=$(basename "$svg")
                name=${filename%.svg}
                
                # Determine environment class
                env_class=""
                if [[ $name == *"dev"* ]]; then
                    env_class="env-dev"
                elif [[ $name == *"staging"* ]]; then
                    env_class="env-staging"
                elif [[ $name == *"prod"* ]]; then
                    env_class="env-prod"
                fi
                
                cat >> diagrams/index.html << EOF
                    <div class="diagram-card $env_class">
                        <h3>$name</h3>
                        <div class="diagram-preview">
                            <a href="$filename" target="_blank">
                                <img src="$filename" alt="$name diagram" style="max-width: 100%; height: auto; border: 1px solid #ccc;">
                            </a>
                        </div>
                        <p><a href="$filename" target="_blank">View Full Diagram</a></p>
                    </div>
        EOF
            fi
        done
        
        cat >> diagrams/index.html << EOF
                </div>
                
                <div class="timestamp">
                    Last updated: $(date -u "+%Y-%m-%d %H:%M:%S UTC")
                </div>
            </div>
        </body>
        </html>
        EOF
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if git diff --quiet HEAD diagrams/; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add diagrams/
        git commit -m "Auto-update Terraform infrastructure diagrams
        
        - Updated diagrams for all environments
        - Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Commit: ${{ github.sha }}
        
        [skip ci]"
        git push
    
    - name: Create deployment summary
      run: |
        echo "## Terraform Diagrams Updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following infrastructure diagrams have been generated and updated:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for svg in diagrams/*.svg; do
          if [ -f "$svg" ]; then
            filename=$(basename "$svg")
            name=${filename%.svg}
            echo "- **$name**" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View all diagrams: [Infrastructure Diagrams Index](./diagrams/index.html)" >> $GITHUB_STEP_SUMMARY
